# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bleebles.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # load the YOLOv5 model
        model_path = "yolov5/runs/train/exp2/weights/best.pt"
        self.model = torch.hub.load("ultralytics/yolov5", "custom", path=model_path, force_reload=True)
        
        # set up GUI
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.video_display = QtWidgets.QLabel(self.centralwidget)
        self.video_display.setGeometry(QtCore.QRect(190, 60, 391, 281))
        self.video_display.setObjectName("video_display")
        
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(240, 410, 93, 28))
        self.start_button.setObjectName("start_button")
        self.start_button.clicked.connect(self.start_detection)
        
        self.stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_button.setGeometry(QtCore.QRect(430, 410, 93, 28))
        self.stop_button.setObjectName("stop_button")
        self.stop_button.clicked.connect(self.stop_detection)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # enable video capture
        self.cap = cv2.VideoCapture(0)
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_frame)
        self.detection_active = False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.video_display.setText(_translate("MainWindow", "TextLabel"))
        self.start_button.setText(_translate("MainWindow", "go p l s"))
        self.stop_button.setText(_translate("MainWindow", "s t o p"))

    def start_detection(self):
        self.detection_active = True
        self.timer.start(30) # update every 30 ms

    def stop_detection(self):
        self.detection_active = False
        self.timer.stop()
        if self.cap:
            self.cap.release() # release video capture
        self.video_display.clear()

    def update_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            return
        
        if self.detection_active:
            # perform inference on the frame
            results = self.model(frame)

            # render results on the frame
            frame = results.render()[0]

            # Convert frame to RGB format for PyQt5
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame_rgb.shape
            bytes_per_line = ch * w
            qt_image = QImage(frame_rgb.data, w, h, bytes_per_line, QImage.Format_RGB888)
            self.video_display.setPixmap(QPixmap.fromImage(qt_image))

    def close_event(self, event):
        self.stop_detection()
        event.accept()

if __name__ == "__main__":
    import sys
    import torch
    import cv2
    from PyQt5 import QtCore, QtWidgets
    from PyQt5.QtGui import QImage, QPixmap
    from PyQt5.QtCore import QTimer
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
